{"version":3,"sources":["components/Note.js","components/Notification.js","components/Separator.js","components/LoginForm.js","components/Togglable.js","components/NoteForm.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleFlagged","className","type","checked","flagged","onChange","content","Notification","message","Separator","style","color","padding","fontStyle","fontSize","backgroundColor","LoginForm","handleLogin","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","name","Togglable","React","forwardRef","ref","buttonLabel","children","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","onClick","noteForm","addNote","noteField","handleInputChange","token","setToken","userToken","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","res","update","id","put","login","credentials","App","props","notes","setNotes","setNoteField","showAll","setShowAll","notificationMessage","setNotificationMessage","setUsername","setPassword","user","setUser","useEffect","noteService","initialNotes","catch","error","loggedInUserJSON","window","localStorage","getItem","JSON","parse","event","preventDefault","loginService","setItem","stringify","console","log","setTimeout","handleLogout","removeItem","exception","referencedNote","find","n","updatedNote","responseNote","map","filteredNotes","filter","noteFormRef","current","newNoteObject","date","Date","Math","random","concat","target","createRef","NoteForm","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46edc656.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleFlagged }) => {\n  return (\n    <li className=\"mainNote card\">\n    <input type=\"checkbox\" checked={note.flagged} onChange={toggleFlagged} />\n    {note.content}\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Separator = () => {\n    const separatorStyle = {\n      color: 'white',\n      padding: 15,\n      fontStyle: 'bold',\n      fontSize: 16,\n      backgroundColor: '#05386B'\n    }\n  \n    return (\n      <div style={separatorStyle}>\n        <p>This is the end of the above content</p>\n      </div> \n    )\n}\n\nexport default Separator","import React from \"react\"\n\nconst LoginForm = ({\n    handleLogin,\n    handleUsernameChange,\n    handlePasswordChange,\n    username,\n    password\n    }) => {\n\n    return (\n        <form onSubmit={handleLogin}>\n          <div>\n            Username\n              <input\n              type=\"text\"\n              value={username}\n              name=\"Username\"\n              onChange={handleUsernameChange}\n            />\n          </div>\n          <div>\n            Password\n              <input\n              type=\"password\"\n              value={password}\n              name=\"Password\"\n              onChange={handlePasswordChange}\n            />\n          </div>\n          <button type=\"submit\">Login</button>\n        </form>      \n    )\n}\n\nexport default LoginForm;","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'proptypes'\n\nconst Togglable = React.forwardRef(({\n      buttonLabel,\n      children\n      }, \n      ref\n    ) => {\n  \n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {children}\n        <button onClick={toggleVisibility}>Cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable","import React from 'react'\n\nconst noteForm = ({\n    addNote,\n    noteField,\n    handleInputChange\n    }) => (\n    <form onSubmit={addNote}>\n        <input\n        value={noteField}\n        onChange={handleInputChange}\n        />\n        <button type=\"submit\">Add Note</button>\n    </form>  \n)\n\nexport default noteForm","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = userToken => {\n  token = `bearer ${userToken}`\n}\n\nconst getAll = () => {\n  const req = axios.get(baseUrl)\n  return req.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  \n  const res = await axios.post(baseUrl, newObject, config)\n  return res.data\n}\n\nconst update = (id, newObject) => {\n  const req = axios.put(`${baseUrl}/${id}`, newObject)\n  return req.then(res => res.data)\n}\n\nexport default {\n  setToken: setToken,\n  getAll: getAll, \n  create: create, \n  update: update\n}","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const res = await axios.post(baseUrl, credentials)\n  return res.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react' // Imported useEffect via Named Import (similar syntax to destructuring)\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Separator from './components/Separator'\nimport LoginForm from './components/LoginForm'\nimport Togglable from './components/Togglable'\nimport NoteForm from './components/NoteForm'\n\nimport axios from 'axios' // Imported axios so we can request for the notes from our server\n\nimport noteService from './services/notes'\nimport loginService from './services/login' \n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]) // Updated to not use the state passed into the component as we'll be fetching it from the server\n  const [noteField, setNoteField] = useState(\n  \t'Enter a new note here...'\n  )\n  const [showAll, setShowAll] = useState(true)\n  const [notificationMessage, setNotificationMessage] = useState()\n  const [username, setUsername] = useState('') \n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  const loadNotesEffect = () => {\n    noteService\n      .getAll()\n        .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n      .catch(error => {\n        setNotificationMessage(`${error}: Something went wrong while trying to retrieve data from the server.`)\n      })\n  }\n  \n  const signedInEffect = () => {\n    const loggedInUserJSON = window.localStorage.getItem('noteAppUser')\n    if (loggedInUserJSON) {\n      const user = JSON.parse(loggedInUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }\n\n  useEffect(loadNotesEffect, [])\n  useEffect(signedInEffect, [])\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      setUser(user)\n      setUsername('')\n      setPassword('')\n      window.localStorage.setItem(\n        'noteAppUser', JSON.stringify(user)\n      )\n      noteService.setToken(user.token)\n      \n    } catch (exception) {\n      console.log(exception)\n      setNotificationMessage('Incorrect credentials: ' + exception)\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 3000)\n    }\n  }\n\n  const handleLogout = async (event) => {\n    event.preventDefault()\n    try {\n      window.localStorage.removeItem('noteAppUser')\n      noteService.setToken(null)\n      setUser(null)\n    } catch (exception) {\n      console.log(exception)\n    }\n  }\n  \n  const toggleFlagged = id => {\n    const referencedNote = notes.find(n => n.id === id)\n    const updatedNote = { ...referencedNote, flagged: !referencedNote.flagged }\n\n    noteService\n    \t.update(id, updatedNote)\n    \t\t.then(responseNote => {\n     \tsetNotes(notes.map(note => note.id === id ? updatedNote : note))\n    })\n  }\n\n  const filteredNotes = showAll ? notes : notes.filter(note => note.flagged)\n\n  const addNote = (event) => {\n    event.preventDefault()\n    noteFormRef.current.toggleVisibility()\n    const newNoteObject = {\n      content: noteField,\n      date: new Date(),\n      flagged: Math.random() > 0.5,\n    }\n  \n    noteService.create(newNoteObject)\n    .then(data => {\n      setNotes(notes.concat(data))\n      setNoteField('Enter a new note here...')\n    })\n  }\n\n  const handleInputChange = (event) => {\n    console.log('Input form changed', event.target.value)\n    setNoteField(event.target.value)\n  }\n  \n  const noteList = () => filteredNotes.map(note => \n  \t<Note\n      key={note.id}\n      note={note}\n      toggleFlagged={() => toggleFlagged(note.id)}\n    />\n  )\n\n  const loginForm = () => {\n    return (\n      <Togglable buttonLabel='Login'>\n          <LoginForm\n            handleLogin={handleLogin}\n            handleUsernameChange={({ target }) => setUsername(target.value)}\n            handlePasswordChange={({ target }) => setPassword(target.value)}\n            username={username}\n            password={password}\n          />\n      </Togglable>\n    )\n  }\n\n  const noteFormRef = React.createRef()\n  \n  const noteForm = () => (\n    <Togglable ref={noteFormRef}>\n      <NoteForm\n        addNote={addNote}\n        noteField={noteField}\n        handleInputChange={handleInputChange}\n      />\n    </Togglable>\n  )\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      \n      {user === null ?\n    \t\tloginForm() :\n  \t\t\t<div>\n          <p>Welcome, {user.name}</p> <button onClick={handleLogout}>Sign Out</button>\n          {noteForm()}\n\t\t\t\t</div>\n    \t} {/* Conditionally render */}\n\n      <Notification message={notificationMessage} />\n      \n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? 'Flagged' : 'All' } \n        </button>\n      </div>\n      \n      <ul>\n        {noteList()}\n      </ul>\n      \n      <Separator />\n      \n    \t</div>\n   )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}